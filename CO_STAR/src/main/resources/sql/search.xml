<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Search">

<!-- 
	<resultMap type="mem" id="memberMap">
		<result property="id" column="id" jdbcType="VARCHAR" />
		<result property="password" column="password" jdbcType="VARCHAR" />
		<result property="name" column="name" jdbcType="VARCHAR" />
		<result property="address" column="address" jdbcType="VARCHAR" />
	</resultMap>
-->	 

	<insert id="addConcert" parameterType="concertVO">
		INSERT INTO Concert VALUES
		(
				#{concertId},
				#{concertName},
				TO_DATE(#{concertStartDate},'YYYY-MM-DD'),
				TO_DATE(#{concertEndDate},'YYYY-MM-DD'),
				#{concertFirstGenre},
				#{concertHall},
				#{concertArea},
				#{concertWebSite},
				#{concertViewAge},
				#{	concertRunningTime},
				#{concertNotice},
				#{concertCompany},
				#{concertActors},
				sysdate,
				'',
				#{concertAverageRating},
				#{concertHits},
				#{concertCommentCount},
				#{memberVO.memberId}
		)
	</insert>
	
	<update id="updateConcert" parameterType="concertVO" >
		UPDATE Concert SET
			concertName=#{concertName},
			concertStartDate=TO_DATE(#{concertStartDate},'YYYY-MM-DD'),
			concertEndDate=TO_DATE(#{concertEndDate},'YYYY-MM-DD'),
			concertFirstGenre=#{concertFirstGenre},
			concertHall=#{concertHall},
			concertArea=#{concertArea},
			concertWebSite=#{concertWebSite},
			concertViewAge=#{concertViewAge},
			concertRunningTime=#{concertRunningTime},
			concertNotice=#{concertNotice},
			concertCompany=#{concertCompany},
			concertActors=#{concertActors},
			
			concertUpdateTime=sysdate,
			concertAverageRating=#{concertAverageRating},
			concertHits=#{concertHits},
			concertCommentCount=#{concertCommentCount},
			memberId=#{memberVO.memberId}
		WHERE concertId=#{concertId}
	</update>
	
	<delete id="deleteConcert" parameterType="string">
		DELETE FROM Concert WHERE concertId=#{concertId} 
	</delete>
	
	
	
	
	<sql id="select-concert">
		SELECT * FROM
	</sql>
	
	<sql id="whereorder-concert">
		WHERE sysdate BETWEEN  concertStartDate AND concertEndDate
		ORDER BY concertEndDate
	</sql>
	
	
	<select id="searchAllConcert" resultType="concertVO">
			<include refid="select-concert"/>
			Concert 
			<include refid="whereorder-concert"/>
	</select>
	
	<select id="selectByConcertId" parameterType="string" resultType="concertVO">
		<include refid="select-concert"/>
		Concert
		WHERE concertId = #{value}
	</select>

	<select id="searchByConcertName" parameterType="string" resultType="concertVO">
		<include refid="select-concert"/>
		(<include refid="select-concert"/> Concert WHERE concertName LIKE '%'||#{value}||'%')
		<include refid="whereorder-concert"/>
	</select>

	<select id="searchByConcertMonth" parameterType="int" resultType="concertVO">
			<include refid="select-concert"/> 
			(<include refid="select-concert"/> Concert WHERE 
		
		<![CDATA[ 
			TO_NUMBER(TO_CHAR(concertStartDate,'MM')) <= #{value}
			AND TO_NUMBER(TO_CHAR(concertEndDate,'MM')) >= #{value})
		]]>
			<include refid="whereorder-concert"/>
			
	</select>
	 
	
	<select id="searchByConcertArea" parameterType="string" resultType="concertVO">
		<include refid="select-concert"/>
		(<include refid="select-concert"/> Concert WHERE concertArea LIKE '%'||#{value}||'%')
		<include refid="whereorder-concert"/>
	</select>
	
	<select id="searchByConcertFirstGenre" parameterType="string" resultType="concertVO">
	<include refid="select-concert"/>
		(<include refid="select-concert"/> Concert WHERE concertFirstGenre LIKE '%'||#{value}||'%')
		<include refid="whereorder-concert"/>
	</select>
	
	<select id="searchByConcertActor" parameterType="string" resultType="concertVO">
	<include refid="select-concert"/>
		(<include refid="select-concert"/> Concert WHERE concertActors LIKE '%'||#{value}||'%')
		<include refid="whereorder-concert"/>
	</select>
	
	<select id="searchByConcertCompany" parameterType="string" resultType="concertVO">
	<include refid="select-concert"/>
		(<include refid="select-concert"/> Concert WHERE concertCompany LIKE UPPER('%'||#{value}||'%'))
		<include refid="whereorder-concert"/>
	</select>
	<!-- UPPER를 적용해 대소문자 관계 없이 검색하게 하였다 -->
	
	<select id="searchByConcertHall" parameterType="string" resultType="concertVO">
	<include refid="select-concert"/>
		(<include refid="select-concert"/> Concert WHERE concertHall LIKE '%'||#{value}||'%')
		<include refid="whereorder-concert"/>
	</select>
	
	
	<select id="recommendByConcertAverageRating" resultType="concertVO">
		SELECT * FROM Concert 
		<![CDATA[ 
			WHERE concertEndDate >= sysdate 
		]]>
		ORDER BY TO_NUMBER(concertAverageRating) DESC, concertCommentCount DESC, concertEndDate
	</select>


	<select id="recommendByConcertConcertComment" resultType="concertVO">
		SELECT * FROM Concert 
		<![CDATA[ 
			WHERE concertEndDate >= sysdate 
		]]>
		ORDER BY concertCommentCount DESC, concertEndDate
	</select>

	<select id="recommendByConcertMonth" parameterType="string" resultType="concertVO">
		SELECT * FROM Concert 
		WHERE TO_DATE(#{value}) BETWEEN  TO_DATE(TRUNC(TO_DATE(concertStartDate),'MM')) AND concertEndDate
		ORDER BY TO_NUMBER(concertAverageRating) DESC, concertCommentCount DESC, concertEndDate
	</select>


	<select id="recommendByConcertHits" resultType="concertVO">
		SELECT * FROM Concert 
		<![CDATA[ 
			WHERE concertEndDate >= sysdate 
		]]>
		ORDER BY concertHits DESC, concertEndDate
	</select>
	
	
	<select id="recommendByConcertDate" parameterType="string" resultType="concertVO">
		SELECT * FROM Concert 
		WHERE TO_DATE(#{value}) BETWEEN  concertStartDate AND concertEndDate
		ORDER BY TO_NUMBER(concertAverageRating) DESC, concertEndDate
	</select>
	
	
	
	<select id="recommendByConcertGenre" parameterType="string" resultType="concertVO">
		SELECT * FROM 
		(SELECT s.concertId, s.concertFirstGenre, csg.concertSecondGenre 
		FROM ConcertSecondGenre csg, 
			(SELECT * FROM Concert WHERE concertFirstGenre LIKE '%'||#{value}||'%') s 
		WHERE csg.concertId = s.concertId
		GROUP BY s.concertId,csg.concertSecondGenre,s.concertFirstGenre)
		 GROUP BY s.
		
	</select>
	
	
	<select id="recommendByConcertArea" parameterType="concertVO" resultType="concertVO">
		SELECT * FROM 
		(SELECT * FROM Concert 
			WHERE #{concertStartDate} 
			BETWEEN  TO_DATE(TRUNC(TO_DATE(concertStartDate),'MM')) 
			AND concertEndDate
			ORDER BY TO_NUMBER(concertAverageRating) DESC, 
			concertCommentCount DESC, concertEndDate)
		WHERE concertArea LIKE '%'||#{concertArea}||'%'
	</select>
	
	
	<select id="recommendByConcertIsForeign" parameterType="ConcertSecondGenreVO" resultType="concertVO">
		SELECT c.* FROM Concert c, 
		(SELECT concertId FROM ConcertSecondGenre
		WHERE concertSecondGenre LIKE '%내한공연%') s
		WHERE c.concertId = s.concertId
	</select>
	
	
	
	<insert id="addSecondGenre" parameterType="concertSecondGenreVO">
		INSERT INTO ConcertSecondGenre VALUES
		(
			#{concertSecondGenreNo},
			#{concertVO.concertId},
			#{concertSecondGenre}
		)
	
	</insert>
	
	<resultMap type="concertSecondGenreVO" id="csgvo">
		<result property="concertVO.concertId" column="concertId"/>
	</resultMap>
	
	<select id="selectSecondGenre" resultMap="csgvo">
		SELECT * FROM ConcertSecondGenre
	</select>
</mapper>
